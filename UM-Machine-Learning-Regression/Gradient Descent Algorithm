import numpy as np
import graphlab
sales = graphlab.SFrame('kc_house_data.gl/')
from math import sqrt

#Function 1: Convert to Numpy Array  
def get_numpy_data(data_sframe, features, output):
    data_sframe['constant'] = 1 
    features = ['constant'] + features # this is how you combine two lists
    features_sframe = data_sframe[features]
    feature_matrix = features_sframe.to_numpy()  # .to_numpy()
    output_sarray =data_sframe[output]
    output_array = output_sarray.to_numpy()
    return(feature_matrix, output_array)
    
#Function 2: Predicting output given regression weights    
def predict_output(feature_matrix, weights):
    predictions = np.dot(feature_matrix,weights)
    return(predictions)
    
#Function 3: Computing the Derivative    
def feature_derivative(errors, feature):
    # compute twice the dot product of these vectors as 'derivative' and return the value
    derivative = (2*errors*feature).sum() #Feature by Feature Update
    return(derivative)

#Function 4: Gradient Descent
def regression_gradient_descent(feature_matrix, output, initial_weights, step_size, tolerance):
    converged = False 
    weights = np.array(initial_weights) # make sure it's a numpy array
    while not converged:
        predictions = predict_output(feature_matrix,weights)
        errors = predictions - output
        gradient_sum_squares = 0 # initialize the gradient sum of squares
        for i in range(len(weights)): # loop over each weight
            derivative = feature_derivative(errors,feature_matrix[:,i])
            gradient_sum_squares=gradient_sum_squares+ derivative*derivative
            weights[i]=weights[i]-step_size*derivative
        gradient_magnitude = sqrt(gradient_sum_squares)
        if gradient_magnitude < tolerance:
            converged = True
    return(weights)
    
(simple_feature_matrix, output) = get_numpy_data(train_data, simple_features, my_output)
initial_weights = np.array([-47000., 1.])
step_size = 7e-12
tolerance = 2.5e7
    
print example_features[0,:] # this accesses the first row of the data the ':' indicates 'all columns'
